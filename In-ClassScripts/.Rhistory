plot(cars)
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*.
x = "test"
y = "ing"
print(x+y)
x = "test"
y = "ing"
plot(cars)
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*.
plot(cars)
setwd("~/Documents/github/getting-started-with-APIs-R/In-ClassScripts")
setwd("~/Documents/github/getting-started-with-APIs-R/In-ClassScripts")
library(httr)
library(jsonlite)
query <- "https://api.census.gov/data/2018/pep/charagegroups?get=POP,GEONAME,DATE_DESC&DATE_CODE=11&RACE=10&for=county:*&in=state:24"
?httr::GET
# Create a GET response to call the API
census_data <- httr::GET(query)
census_data
# View the API GET response result
str(census_data)    # check the status code -- 200 means good to go
str(census_data$content)
head(census_data$content)
census_data$content
# convert raw content to text (a JSON string)
census_content <- httr::content(census_data, as ="text")
str(census_content)
# use jsonlite to convert this string to a dataframe and view data in a table
?jsonlite::fromJSON
# use jsonlite to convert this string to a dataframe and view data in a table
census_json <- jsonlite::fromJSON(census_content)
View(census_json)
print(census_content)
# load libraries
library(censusapi)
## make a variable for your key
api_key_source = source('api-keys.R')  # load up API key
api_key = api_key_source$value
print(api_key)
apis <- listCensusApis()
View(apis)
View(apis)   # use search function to search for "Small Area Health Insurance Estimates"
## specify the type argument = variables to see the variables available
sahie_vars <- listCensusMetadata( name = "timeseries/healthins/sahie",
type = "variables")
head(sahie_vars)
View(sahie_vars)
( name = "timeseries/healthins/sahie",
# see what geographies are available
sahie_geo <- listCensusMetadata( name = "timeseries/healthins/sahie",
type = "geography")
head(sahie_geo)
# see documentation
?getCensus
# get uninsured rate by income group at the national level for 2018.
sahie_national <- getCensus( name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "us:*",
time = 2018,
key = api_key)
View(sahie_national)
# change region to state to get state level data
sahie_states <- getCensus( name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "state:*",
time = 2018,
key = api_key)
View(sahie_states)
# get county-level data with region. Query for just Maryland with regionin
sahie_counties_MD <- getCensus(name = "timeseries/healthins/sahie",
vars = c("NAME", "IPRCAT", "IPR_DESC", "PCTUI_PT"),
region = "county:*",
regionin = "state:24",
time = 2018,
key = api_key)
head(sahie_counties_MD)
head(sahie_counties_MD)
# this dataset is also a timeseries data (as we saw from the metadata)
# use the time argument
# percent uninsured in MD from 2016 to 2018
sahie_years_MD <- getCensus( name = "timeseries/healthins/sahie",
vars = c("NAME", "PCTUI_PT"),
region = "state:24",
time = "from 2006 to 2018",
key = api_key)
View(sahie_years_MD)
